'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var fs = require('fs');
var glob = require('glob');
var mustache = require('mustache');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var glob__default = /*#__PURE__*/_interopDefaultLegacy(glob);
var mustache__default = /*#__PURE__*/_interopDefaultLegacy(mustache);

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Unique identifier under which is specified which port to use for injecting locally hosted custom widget to a running DevPortal instance.
 */
const OVERRIDE_PORT_KEY = "MS_APIM_CW_localhost_port";
/**
 * Default port for running local dev server on.
 */
const OVERRIDE_DEFAULT_PORT = 3000;
/** List of all supported technologies to scaffold a widget in. */
const TECHNOLOGIES = ["typescript", "react", "vue"];
/**
 * Converts user defined name of a custom widget to a unique ID, which is in context of Dev Portal known as "name".
 *
 * @param displayName - User defined name of the custom widget.
 */
const displayNameToName = (displayName) => encodeURIComponent(displayName
    .normalize("NFD")
    .toLowerCase()
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[^a-z0-9-]/g, "-"));
/**
 * Returns name of the folder for widget project.
 *
 * @param name - name of the widget
 */
const widgetFolderName = (name) => `azure-api-management-widget-${name}`;

// Copyright (c) Microsoft Corporation.
async function getTemplates(template) {
    const sharedFiles = await getFiles(path.join(__dirname, "templates", "_shared", "**", "**", "*.*"));
    const templateFiles = await getFiles(path.join(__dirname, "templates", template, "**", "**", "*.*"));
    return [...sharedFiles, ...templateFiles];
}
async function getFiles(path) {
    return new Promise((resolve, reject) => {
        glob__default["default"](path, { dot: true }, (error, matches) => {
            if (error) {
                reject(error);
            }
            resolve(matches);
        });
    });
}

// Copyright (c) Microsoft Corporation.
const templateSuffix = ".mustache";
/**
 * Generates a scaffold project of Custom widget for API Managements' Dev Portal.
 *
 * @param widgetConfig - JSON object with data required by DevPortal to handle a widget integration.
 * @param deploymentConfig - JSON object with data for deployment.
 * @param options - JSON object with other data, which will not be stored in the DevPortal.
 */
async function generateProject(widgetConfig, deploymentConfig, options = {}) {
    const { openUrl } = options;
    const openUrlParsed = openUrl ? new URL(openUrl) : null;
    if (openUrlParsed) {
        openUrlParsed.searchParams.append(OVERRIDE_PORT_KEY, String(OVERRIDE_DEFAULT_PORT));
    }
    const name = displayNameToName(widgetConfig.displayName);
    const serverSettings = {
        port: OVERRIDE_DEFAULT_PORT,
        open: openUrlParsed ? openUrlParsed.toString() : true,
    };
    const renderTemplate = async (file) => {
        const isTemplate = file.endsWith(templateSuffix);
        const encoding = file.endsWith(".ttf") ? "binary" : "utf8";
        let fileData = await fs.promises.readFile(file, { encoding });
        if (isTemplate) {
            fileData = mustache__default["default"].render(fileData, {
                name,
                displayName: widgetConfig.displayName,
                config: JSON.stringify(Object.assign(Object.assign({}, widgetConfig), { name }), null, "\t"),
                configDeploy: JSON.stringify(deploymentConfig, null, "\t"),
                serverSettings: JSON.stringify(serverSettings, null, "\t"),
            });
        }
        let relativePath = file;
        if (__dirname.includes("\\")) {
            relativePath = relativePath.replace(/\//g, "\\");
        }
        relativePath = relativePath
            .replace(path.join(__dirname, "templates", "_shared"), "")
            .replace(path.join(__dirname, "templates", widgetConfig.technology), "")
            .replace(templateSuffix, "");
        const newFilePath = path.join(process.cwd(), widgetFolderName(name), relativePath);
        const dir = path.parse(newFilePath).dir;
        await fs.promises.mkdir(dir, { recursive: true });
        await fs.promises.writeFile(newFilePath, fileData, { encoding });
    };
    const templates = await getTemplates(widgetConfig.technology);
    for (const file of Object.values(templates)) {
        await renderTemplate(file);
    }
    return;
}

exports.OVERRIDE_DEFAULT_PORT = OVERRIDE_DEFAULT_PORT;
exports.OVERRIDE_PORT_KEY = OVERRIDE_PORT_KEY;
exports.TECHNOLOGIES = TECHNOLOGIES;
exports.displayNameToName = displayNameToName;
exports.generateProject = generateProject;
exports.widgetFolderName = widgetFolderName;
//# sourceMappingURL=index.js.map
