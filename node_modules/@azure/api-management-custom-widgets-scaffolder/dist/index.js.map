{"version":3,"file":"index.js","sources":["../src/scaffolding.ts","../src/getTemplates.ts","../src/generateProject.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Unique identifier under which is specified which port to use for injecting locally hosted custom widget to a running DevPortal instance.\n */\nexport const OVERRIDE_PORT_KEY = \"MS_APIM_CW_localhost_port\";\n/**\n * Default port for running local dev server on.\n */\nexport const OVERRIDE_DEFAULT_PORT = 3000;\n\n/** All supported technologies to scaffold a widget in. */\nexport type ScaffoldTech = \"typescript\" | \"react\" | \"vue\";\n\n/** List of all supported technologies to scaffold a widget in. */\nexport const TECHNOLOGIES: ScaffoldTech[] = [\"typescript\", \"react\", \"vue\"];\n\n/** Main data which DevPortal needs for every custom widget.  */\nexport interface WidgetConfig {\n  /** Name of the custom widget which is displayed in DevPortal. */\n  displayName: string;\n  /** Technology to use to scaffold the widget. */\n  technology: ScaffoldTech;\n  /** Optional URL for a custom icon, which will be displayed in DevPortal widget list. */\n  iconUrl?: string;\n}\n\n/** Data needed for deployment. */\nexport interface DeploymentConfig {\n  /** Management API endpoint to use (e.g. management.azure.com). */\n  managementApiEndpoint: string;\n  /** resourceId of your APIM service, must be in this format: subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.ApiManagement/service/<service-name> */\n  resourceId: string;\n  /** optional override which API version to use during deployment */\n  apiVersion?: string;\n}\n\n/** Miscellaneous data for scaffolding of a custom widget which will not be stored in DevPortal. */\nexport interface Options {\n  /** The URL to open after development server of the widget is started (URL of your Developer Portal). If you don't want to use this feature, set it to `false`. If you want to open just the widget page, set it to `true`. */\n  openUrl?: string;\n}\n\nexport type Configs = WidgetConfig | DeploymentConfig | Options;\n\n/**\n * Converts user defined name of a custom widget to a unique ID, which is in context of Dev Portal known as \"name\".\n *\n * @param displayName - User defined name of the custom widget.\n */\nexport const displayNameToName = (displayName: string): string =>\n  encodeURIComponent(\n    displayName\n      .normalize(\"NFD\")\n      .toLowerCase()\n      .replace(/[\\u0300-\\u036f]/g, \"\")\n      .replace(/[^a-z0-9-]/g, \"-\")\n  );\n\n/**\n * Returns name of the folder for widget project.\n *\n * @param name - name of the widget\n */\nexport const widgetFolderName = (name: string): string => `azure-api-management-widget-${name}`;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ScaffoldTech } from \"./scaffolding\";\nimport glob from \"glob\";\nimport { join as pathJoin } from \"path\";\n\nexport async function getTemplates(template: ScaffoldTech): Promise<string[]> {\n  const sharedFiles = await getFiles(\n    pathJoin(__dirname, \"templates\", \"_shared\", \"**\", \"**\", \"*.*\")\n  );\n  const templateFiles = await getFiles(\n    pathJoin(__dirname, \"templates\", template, \"**\", \"**\", \"*.*\")\n  );\n  return [...sharedFiles, ...templateFiles];\n}\n\nasync function getFiles(path: string): Promise<string[]> {\n  return new Promise((resolve, reject) => {\n    glob(path, { dot: true }, (error, matches) => {\n      if (error) {\n        reject(error);\n      }\n      resolve(matches);\n    });\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  DeploymentConfig,\n  OVERRIDE_DEFAULT_PORT,\n  OVERRIDE_PORT_KEY,\n  Options,\n  WidgetConfig,\n  displayNameToName,\n  widgetFolderName,\n} from \"./scaffolding\";\nimport { join as joinPath, parse as parsePath } from \"path\";\nimport { promises as fs } from \"fs\";\nimport { getTemplates } from \"./getTemplates\";\nimport mustache from \"mustache\";\n\nconst templateSuffix = \".mustache\";\n\n/**\n * Generates a scaffold project of Custom widget for API Managements' Dev Portal.\n *\n * @param widgetConfig - JSON object with data required by DevPortal to handle a widget integration.\n * @param deploymentConfig - JSON object with data for deployment.\n * @param options - JSON object with other data, which will not be stored in the DevPortal.\n */\nexport async function generateProject(\n  widgetConfig: WidgetConfig,\n  deploymentConfig: DeploymentConfig,\n  options: Options = {}\n): Promise<void> {\n  const { openUrl } = options;\n  const openUrlParsed = openUrl ? new URL(openUrl) : null;\n  if (openUrlParsed) {\n    openUrlParsed.searchParams.append(OVERRIDE_PORT_KEY, String(OVERRIDE_DEFAULT_PORT));\n  }\n\n  const name = displayNameToName(widgetConfig.displayName);\n  const serverSettings = {\n    port: OVERRIDE_DEFAULT_PORT,\n    open: openUrlParsed ? openUrlParsed.toString() : true,\n  };\n\n  const renderTemplate = async (file: string): Promise<void> => {\n    const isTemplate = file.endsWith(templateSuffix);\n    const encoding = file.endsWith(\".ttf\") ? \"binary\" : \"utf8\";\n    let fileData = await fs.readFile(file, { encoding });\n    if (isTemplate) {\n      fileData = mustache.render(fileData, {\n        name,\n        displayName: widgetConfig.displayName,\n        config: JSON.stringify({ ...widgetConfig, name }, null, \"\\t\"),\n        configDeploy: JSON.stringify(deploymentConfig, null, \"\\t\"),\n        serverSettings: JSON.stringify(serverSettings, null, \"\\t\"),\n      });\n    }\n\n    let relativePath = file;\n    if (__dirname.includes(\"\\\\\")) {\n      relativePath = relativePath.replace(/\\//g, \"\\\\\");\n    }\n    relativePath = relativePath\n      .replace(joinPath(__dirname, \"templates\", \"_shared\"), \"\")\n      .replace(joinPath(__dirname, \"templates\", widgetConfig.technology), \"\")\n      .replace(templateSuffix, \"\");\n    const newFilePath = joinPath(process.cwd(), widgetFolderName(name), relativePath);\n    const dir = parsePath(newFilePath).dir;\n\n    await fs.mkdir(dir, { recursive: true });\n    await fs.writeFile(newFilePath, fileData, { encoding });\n  };\n\n  const templates = await getTemplates(widgetConfig.technology);\n  for (const file of Object.values(templates)) {\n    await renderTemplate(file);\n  }\n\n  return;\n}\n"],"names":["pathJoin","glob","fs","mustache","joinPath","parsePath"],"mappings":"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"}