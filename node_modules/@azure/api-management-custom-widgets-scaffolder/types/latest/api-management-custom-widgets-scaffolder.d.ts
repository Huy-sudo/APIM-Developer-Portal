/**
 * @packageDocumentation https://aka.ms/apimdocs/portal/customwidgets
 */

/** Main data which DevPortal needs for every custom widget.  */
export declare interface CustomWidgetCommonConfig {
    /** Name of the custom widget which is displayed in DevPortal. */
    displayName: string;
    /** Technology to use to scaffold the widget. */
    technology: ScaffoldTech;
    /** Optional URL for a custom icon, which will be displayed in DevPortal widget list. */
    iconUrl?: string;
}

/** Data needed for deployment. */
export declare interface DeploymentConfig {
    /** Management API endpoint to use (e.g. management.azure.com). */
    managementApiEndpoint: string;
    /** resourceId of your APIM service, must be in this format: subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.ApiManagement/service/<service-name> */
    resourceId: string;
    /** optional override which API version to use during deployment */
    apiVersion?: string;
}

/**
 * Converts user defined name of a custom widget to a unique ID, which is in context of Dev Portal known as "name".
 *
 * @param displayName - User defined name of the custom widget.
 */
export declare const displayNameToName: (displayName: string) => string;

/**
 * Generates a scaffold project of Custom widget for API Managements' Dev Portal.
 *
 * @param widgetConfig - JSON object with data required by DevPortal to handle a widget integration.
 * @param deploymentConfig - JSON object with data for deployment.
 * @param options - JSON object with other data, which will not be stored in the DevPortal.
 */
export declare function generateProject(widgetConfig: CustomWidgetCommonConfig, deploymentConfig: DeploymentConfig, options?: Options): Promise<void>;

/** Miscellaneous data for scaffolding of a custom widget which will not be stored in DevPortal. */
export declare interface Options {
    /** The URL to open after development server of the widget is started (URL of your Developer Portal). If you don't want to use this feature, set it to `false`. If you want to open just the widget page, set it to `true`. */
    openUrl?: string;
}

/**
 * Default port for running local dev server on.
 */
export declare const OVERRIDE_DEFAULT_PORT = 3000;

/**
 * Unique identifier under which is specified which port to use for injecting locally hosted custom widget to a running DevPortal instance.
 */
export declare const OVERRIDE_PORT_KEY = "MS_APIM_CW_localhost_port";

/** All supported technologies to scaffold a widget in. */
export declare type ScaffoldTech = "typescript" | "react" | "vue";

/** List of all supported technologies to scaffold a widget in. */
export declare const TECHNOLOGIES: ScaffoldTech[];

/**
 * Returns name of the folder for widget project.
 *
 * @param name - name of the widget
 */
export declare const widgetFolderName: (name: string) => string;

export { }
