// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { fieldIdToName, } from "./execute-configs";
import { hideBin } from "yargs/helpers";
import yargsParser from "yargs-parser";
export const extractConfigFromArgs = (argv, validateConfig, red) => {
    const configPartial = {};
    let missing = false;
    Object.entries(validateConfig).forEach(([key, v]) => {
        const validate = v;
        const value = argv[key];
        const response = validate(value);
        if (response === true) {
            if (value !== null && value !== undefined) {
                configPartial[key] = value;
            }
        }
        else if (value === null || value === undefined) {
            missing = true;
        }
        else {
            missing = true;
            red(`"${value}" is not a valid value for "${key}"`);
            if (typeof response === "string")
                red(response);
        }
    });
    return { configPartial, missing };
};
export const buildGetConfig = (gray, red) => {
    const argv = yargsParser(hideBin(process.argv));
    return async (promptForConfig, validateConfig) => {
        const { configPartial, missing } = extractConfigFromArgs(argv, validateConfig, red);
        if (missing || !Object.values(configPartial).length) {
            return promptForConfig(configPartial);
        }
        else {
            gray("Retrieved from the command parameters");
            Object.entries(configPartial).forEach(([key, value]) => { var _a; return value != null && gray(`${(_a = fieldIdToName[key]) !== null && _a !== void 0 ? _a : key}: ${value}`); });
            return configPartial;
        }
    };
};
//# sourceMappingURL=execute-helpers.js.map