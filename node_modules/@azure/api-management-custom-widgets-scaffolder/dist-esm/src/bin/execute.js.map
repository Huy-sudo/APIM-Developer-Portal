{"version":3,"file":"execute.js","sourceRoot":"","sources":["../../../src/bin/execute.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Log, buildGetConfig } from \"./execute-helpers\";\nimport {\n  prefixUrlProtocol,\n  promptDeployConfig,\n  promptMiscConfig,\n  promptWidgetConfig,\n  validateDeployConfig,\n  validateMiscConfig,\n  validateWidgetConfig,\n} from \"./execute-configs\";\n\nimport chalk from \"chalk\";\nimport { generateProject } from \"../generateProject\";\n\nconst log = console.log;\nconst white: Log = (msg) => log(chalk.white(msg));\nconst green: Log = (msg) => log(chalk.green(msg));\nconst red: Log = (msg) => log(chalk.red(msg));\nconst gray: Log = (msg) => log(chalk.gray(msg));\n\nasync function main(): Promise<void> {\n  green(\n    \"\\nThis tool generates code scaffold for custom widgets in the Azure API Management’s developer portal. Learn more at https://aka.ms/apimdocs/portal/customwidgets.\\n\"\n  );\n\n  const getConfig = buildGetConfig(gray, red);\n\n  white(\"Specify the custom widget configuration.\");\n  const widgetConfig = await getConfig(promptWidgetConfig, validateWidgetConfig);\n  white(\"Specify the Azure API Management service configuration.\");\n  const deployConfig = await getConfig(promptDeployConfig, validateDeployConfig);\n  white(\"Specify other options\");\n  const miscConfig = await getConfig(promptMiscConfig, validateMiscConfig);\n\n  if (deployConfig.resourceId[0] === \"/\") {\n    deployConfig.resourceId = deployConfig.resourceId.slice(1);\n  }\n  if (deployConfig.resourceId.slice(-1) === \"/\") {\n    deployConfig.resourceId = deployConfig.resourceId.slice(0, -1);\n  }\n  if (deployConfig.apiVersion === \"\") {\n    delete deployConfig.apiVersion;\n  }\n\n  deployConfig.managementApiEndpoint = prefixUrlProtocol(deployConfig.managementApiEndpoint);\n\n  miscConfig.openUrl = miscConfig.openUrl\n    ? prefixUrlProtocol(miscConfig.openUrl)\n    : miscConfig.openUrl;\n\n  return generateProject(widgetConfig, deployConfig, miscConfig)\n    .then(() => green(\"\\nThe custom widget’s code scaffold has been successfully generated.\\n\"))\n    .catch(console.error);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((err) => {\n    console.error(err);\n    process.exit(1);\n  });\n"]}