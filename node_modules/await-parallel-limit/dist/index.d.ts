declare type Unpacked<T> = T extends (...args: any[]) => infer U ? U : T extends Promise<infer U> ? U : T;
declare const parallel: <T>(jobs: { [K in keyof T]: () => Promise<T[K]>; }, limit: number) => Promise<{ [K in keyof { [K in keyof T]: () => Promise<T[K]>; }]: Unpacked<Unpacked<{ [K in keyof T]: () => Promise<T[K]>; }[K]>>; }>;
export default parallel;
